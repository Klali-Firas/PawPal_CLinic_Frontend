import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';
import { firstValueFrom } from 'rxjs';
import { Animaux, Avis, RendezVous, Services, Utilisateurs } from 'src/app/interfaces/interfaces';
import { AnimauxService } from 'src/app/services/animaux.service';
import { AvisService } from 'src/app/services/avis.service';
import { RendezvousService } from 'src/app/services/rendezvous.service';
import { ServiceService } from 'src/app/services/service.service';

declare var $: any;

@Component({
  selector: 'app-mes-rendez-vous-proprietaire',
  templateUrl: './mes-rendez-vous-proprietaire.component.html',
  styleUrls: ['./mes-rendez-vous-proprietaire.component.css']
})
export class MesRendezVousProprietaireComponent implements OnInit {
  user: Utilisateurs = JSON.parse(localStorage.getItem('user') || '{}');
  rendezVous: RendezVous[] = [];
  animaux: Animaux[] = [];
  avisForm: FormGroup;
  selectedRendezVous: RendezVous | null = null;
  page: number = 1;
  services: Map<number, Services> = new Map();

  constructor(
    private fb: FormBuilder,
    private rendezvousService: RendezvousService,
    private avisService: AvisService,
    private toastr: ToastrService,
    private animauxService: AnimauxService,
    private serviceService: ServiceService
  ) {
    this.avisForm = this.fb.group({
      id: [0],
      note: [null, [Validators.required, Validators.min(1), Validators.max(5)]],
      commentaire: ['', Validators.required],
      update: [false]
    });
  }

  async ngOnInit(): Promise<void> {
    await this.getAnimauxByProprietaireId();
    this.getServices();
    this.getRendezVousByProprietaireId();
  }

  getRendezVousByProprietaireId(): void {
    this.rendezvousService.getAllRendezVous().subscribe({
      next: (response: RendezVous[]) => {
        this.rendezVous = response.filter(rv => rv.animalId in this.animaux.map(a => a.id));
      },
      error: (error: any) => {
        console.error('Error fetching rendez-vous', error);
      }
    });
  }

  openModal(rendezVous: RendezVous): void {
    this.selectedRendezVous = rendezVous;
    this.avisService.getAviByRendezVousIdAndProprietaireId(rendezVous.id, this.user.id).subscribe({
      next: (avis: Avis) => {
        this.avisForm.patchValue({
          id: avis.id,
          note: avis.note,
          commentaire: avis.commentaire,
          update: true
        });
      },
      error: () => {
        this.avisForm.reset();
      }
    });
    $('#avisModal').modal('show');
  }

  onSubmit(): void {
    if (this.avisForm.valid && this.selectedRendezVous) {
      const formValue = this.avisForm.value;
      const avis: Avis = {
        id: formValue.id, // Assuming the ID will be generated by the backend
        rendezVousId: this.selectedRendezVous.id,
        note: formValue.note,
        commentaire: formValue.commentaire,
        creeLe: new Date(),
        proprietaireId: this.user.id
      };
      if (!formValue.update) {
        this.avisService.createAvi(avis).subscribe({
          next: () => {
            this.toastr.success('Avis ajouté avec succès', 'Succès');
            $('#avisModal').modal('hide');
          },
          error: (error: any) => {
            console.error('Erreur lors de l\'ajout de l\'avis', error);
            this.toastr.error('Erreur lors de l\'ajout de l\'avis', 'Erreur');
          }
        });
      } else {
        this.avisService.updateAvi(avis.id, avis).subscribe({
          next: () => {
            this.toastr.success('Avis modifié avec succès', 'Succès');
            $('#avisModal').modal('hide');
          },
          error: (error: any) => {
            console.error('Erreur lors de la modification de l\'avis', error);
            this.toastr.error('Erreur lors de la modification de l\'avis', 'Erreur');
          }
        });
      }
    }
  }

  async getAnimauxByProprietaireId(): Promise<void> {
    try {
      this.animaux = await firstValueFrom(this.animauxService.getAnimauxByProprietaireId(this.user.id));
    } catch (error) {
      console.error('Error fetching animaux', error);
    }
  }

  getServices(): void {
    this.serviceService.getAllServices().subscribe({
      next: (response: Services[]) => {
        response.forEach(service => {
          this.services.set(service.id, service);
        });
      },
      error: (error: any) => {
        console.error('Error fetching services', error);
      }
    });
  }
}